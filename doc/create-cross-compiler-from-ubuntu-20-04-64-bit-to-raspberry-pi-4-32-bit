So, we are going to cross-compile from Ubuntu 20.04 64-bit to
Raspberry Pi OS 32-bit
Because we cannot use Raspberry Pi OS 64-bit (MMAL doesn't work there)
and because build2 can't build itself on Raspberry Pi OS 32-bit.
So here we are.
Cross-compiling with build2.
We need a toolchain first.

EDIT: Before you start: Don't do this. The procedure doesn't work yet. Read to the end.
      For now, we just install g++-10 on the rpi, and compile slowly there instead.

Used this:
https://ilyas-hamadouche.medium.com/creating-a-cross-platform-toolchain-for-raspberry-pi-4-5c626d908b9d
no I used this:
https://medium.com/@stonepreston/how-to-cross-compile-a-cmake-c-application-for-the-raspberry-pi-4-on-ubuntu-20-04-bac6735d36df

sudo apt-get install automake bison chrpath flex g++ git gperf gawk help2man libexpat1-dev libncurses5-dev libsdl1.2-dev libtool libtool-bin libtool-doc python2.7-dev texinfo
git clone https://github.com/crosstool-ng/crosstool-ng.git
cd crosstool-ng
git checkout 30316 # This happened to be the commit on top of master when I cloned
./bootstrap
./configure --prefix=/home/torbjorn/.local
make
make install
ct-ng list-samples
mkdir -p ~/raspberry_pi/toolchain_staging
cd ~/raspberry_pi/toolchain_staging

## ON THE PI ##
sudo apt install binutils-source
uname -r
ld --version
gcc --version
ldd --version
sudo apt install symlinks
sudo symlinks -rc /. # This changes all symlinks in the whole OS to relative ones. Crazy.

# Menu Preferences -> Raspberry Pi Configuration -> Interfaces -> Enable ssh

## ON THE HOST ##
mkdir src
mkdir -p patches/binutils/2.31.1/ # or whatever version you got from ld --version
cd patches/binutils/2.31.1/
scp pi@raspberrypi:/usr/src/binutils/patches/129_multiarch_libpath.patch ./
cd ../../../
ct-ng armv8-rpi3-linux-gnueabihf
ct-ng menuconfig
# Paths and misc options ---> <Enter>
# Local tarballs directory <Enter>
# ${CT_TOP_DIR}/src <Enter>
# Working directory <Enter>
# ${CT_TOP_DIR}/build <Enter>
# Prefix directory
# ${CT_TOP_DIR}/${CT_HOST:+HOST-${CT_HOST}/}${CT_TARGET} <Enter>
# Remove prefix dir prior to building <Was already enabled, so I did nothing. It should be enabled>
# Render the toolchain read only <Space, to disable. It should be disabled.>
# Strip target toolchain executables <Space to enable. Should be enabled>
# Patches origin <Enter>
# Bundled, then local <Space>
# Local patch directory <Enter>
# ${CT_TOP_DIR}/patches <Enter>
# Exit <Enter>
# Target options ---> <Enter>
# Emit assembly for CPU <Enter>
# coretex-a72 <Enter>
# Exit <Enter>
# Toolchain options ---> <Enter>
# Build static toolchain <Space, should be enabled>
# Tuple's vendor string <Enter>
# rpi4 <Enter>
# Exit <Enter>
# Operating system --->
# Version of Linux
# <whatever uname -r gave you. Mine is 5.4.51, but closest option was 5.4.89, so I tried that> <Enter>
# Exit <Enter>
# Binary utilities --> <Enter>
# Version of binutils <Enter>
# <Output of your ld --version. Mine was 2.31.1> <Scroll down to it, then Space>
# Exit <Enter>
# C library ---> <Enter>
# Version of glibc <Enter>
# <Output of your ldd --version. Mine was 2.28> <Scroll down to it, then Space>
# Enable -werror during build <Scroll down to it, then space to disable. It should be disabled>
# C compiler <Enter>
# Version of gcc <Enter>
# <Output of gcc --version. Mine was 8.3.0. The closest one in the menu was 8.4.0.> <Scroll down to it, then Space>
# gcc extra config <Enter>
# --enable-multiarch <Enter>
# Additional supported languages: C++ <Should be enabled>
# Exit <Enter>
# Save <Enter>
# Accept default filename
# Exit <Enter>

export DEB_TARGET_MULTIARCH=arm-linux-gnueabihf
ct-ng build # This will take ca 30 minutes
armv8-rpi4-linux-gnueabihf/armv8-rpi4-linux-gnueabihf/bin/ld --verbose | grep -i "search"

cd armv8-rpi4-linux-gnueabihf/armv8-rpi4-linux-gnueabihf/sysroot/
### Install rsync on PI ###
sudo apt install rsync
### Install OpenCV on the PI
### See other documentation in this directory for how to do that.

### Now, on the host, do this
rsync -rzLR --safe-links pi@raspberrypi:/lib/ ./
rsync -rzLR --safe-links pi@raspberrypi:/usr/include/ ./
rsync -rzLR --safe-links pi@raspberrypi:/usr/lib/ ./
# The last line crashed for me, with the message several times:
failed: Too many levels of symbolic links (40)

# I also learned that gcc8 is not recent enough for us
# I will try to get around this build2 not working on 32-bit disaster
# by creating custom build scripts or a Makefile instead, that
# works for compiling on the Raspberry Pi 4 itself.
# The Raspberry Pi OS will eventually be 64-bit, and then this problem
# will disappear for us.
















