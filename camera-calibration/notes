
# I try to calibrate with the following command,
```
$ opencv_interactive-calibration -t=charuco -sz=18.0 -w=16 -h=9 -of=camParams.xml -ft=true -vis=grid -d=1.0
```

It succeeds, and I get the values stored in camParams.xml.
The values look ok.
The problem is that the video stream it uses has resolution 1280x960
The camera will take images with resolution 3280x2464
So I can't really use the values I got.

Computed focal length is 1043.843 px
Pixel size in this case is not 0.00112 mm as it would have been if resolution was right.
Instead, the pixel width in the video stream is (3280/1280)*0.00112 mm.
After conversion, the calculated focal length from the calibration is
pretty close to the expected 3.04 mm:
1043.843*(3280/1280)*0.00112=2.996 mm

To get full resolution camera calibration images, I've used
raspistill --quality 100 --keypress -o camera_calib_%04d.jpg --width 3280 --height 2464
which lets me take photos with "Enter", and exit with "X" followed by "Enter".

Now I had the problem that I wanted to feed these images into a calibration algorithm.
In OpenCV there are two choices: `calibrateCamera()` and `calibrateCameraCharuco()`.

I tried the first one, since there was a nice sample program already shipped
in the samples directory of opencv.

$ cd ~/opencv/samples/cpp
$ g++ calibration.cpp `pkg-config --cflags --libs opencv4`
which created an executable with the default name `a.out`.

I created a list, `list.xml`, of my input image names, and issued
$ ./a.out -w=15 -h=8 -s=0.018 -o=camera.yaml -op -oe -dt=0.288 list.xml

The problem with this command is that it assumes my charuco pattern to be a chessboard pattern.
That seemed to work fine in some initial video 640x480 testing.
However, the command seemed never to finish.

My next hope is a sample program shipped together with the aruco contrib module:
$ cd /home/pi/opencv_contrib/modules/aruco/samples/
$ g++ calibrate_camera_charuco.cpp `pkg-config --cflags --libs opencv4`

It creates the executable with the default name `a.out`.
By default it only works on a video stream, from which it collects images.
I did a test run, and it seemed to work fine on 640x480 video.
The computed calibration values however, are quite rubbish because of the low resolution.

I need to adapt `calibrate_camera_charuco.cpp` so that it can use my `list.xml`
of high-res calibration images.
This should merely be a matter of copy-pasting code from `calibration.cpp` that I tried to use earlier.

$ ./a.out -a=2714.286 -d=16 -h=16 -w=9 --ml=0.014 --sl=0.018 -i=list.xml myCamParams.xml

-a fixates the aspect ratio.
That is, it treats the focal length and pixel size as known values.
Calculated as focal_length/pixel_size.
In mm for the picam, that is
3.04/0.00112=2714.286

For more info about what `calibrate_camera_charuco.cpp` does, see
https://docs.opencv.org/4.4.0/da/d13/tutorial_aruco_calibration.html
